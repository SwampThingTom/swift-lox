//
//  ASTGenerator.swift
//  lox
//
//  Created by Thomas Aylesworth on 7/31/21.
//

import Foundation

typealias Field = (name: String, type: String)

class ASTGenerator {
    
    func generate(outputDirectory: String) {
        defineAst(outputDirectoryURL: URL(fileURLWithPath: outputDirectory),
                  baseName: "Expr",
                  types: [
                    "Binary   : Expr left, Token oper, Expr right",
                    "Grouping : Expr expression",
                    "Literal  : Any value",
                    "Unary    : Token oper, Expr right"
                  ])
    }
    
    private func defineAst(outputDirectoryURL: URL,
                           baseName: String,
                           types: [String]) {
        let fileURL = outputDirectoryURL.appendingPathComponent("\(baseName).swift")
        guard let writer = PrintWriter(url: fileURL, encoding: .utf8) else {
            print("Unable to create file '\(fileURL)'.")
            return
        }
        
        writer.printLine("// Autogenerated by Lox generate_ast.")
        writer.printLine()
        writer.printLine("class \(baseName) {")
        
        for astType in types {
            let components = astType.components(separatedBy: ":")
            let className = components[0].trimmingCharacters(in: .whitespaces)
            let fields = components[1].trimmingCharacters(in: .whitespaces)
            defineType(writer: writer,
                       baseName: baseName,
                       className: className,
                       fieldList: fields)
        }
        
        writer.printLine("}")
    }
    
    private func defineType(writer: PrintWriter,
                            baseName: String,
                            className: String,
                            fieldList: String) {
        let fields = fields(from: fieldList)
        
        writer.printLine()
        writer.printLine("    class \(className): \(baseName) {")
        
        // Define properties.
        for field in fields {
            writer.printLine("        let \(field.name): \(field.type)")
        }
        
        // Define initializer.
        writer.printLine("        init(\(arguments(for: fields))) {")
        for field in fields {
            writer.printLine("            self.\(field.name) = \(field.name)")
        }
        writer.printLine("        }")
        
        writer.printLine("    }")
    }
    
    private func fields(from fieldList: String) -> [Field] {
        fieldList.components(separatedBy: ", ").map() {
            let fieldAndType = $0.split(separator: " ")
            let type = fieldAndType[0].trimmingCharacters(in: .whitespaces)
            let name = fieldAndType[1].trimmingCharacters(in: .whitespaces)
            return (name: name, type: type)
        }
    }
    
    private func arguments(for fields: [Field]) -> String {
        fields.map() { "\($0.name): \($0.type)" }
              .joined(separator: ", ")
    }
}
