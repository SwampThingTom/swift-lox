// Autogenerated by Lox generate_ast.

protocol ExprVisitor {
    associatedtype ReturnType
    func visitBinaryExpr(_ expr: Expr.Binary) throws -> ReturnType
    func visitGroupingExpr(_ expr: Expr.Grouping) throws -> ReturnType
    func visitLiteralExpr(_ expr: Expr.Literal) throws -> ReturnType
    func visitUnaryExpr(_ expr: Expr.Unary) throws -> ReturnType
}

class Expr {
    func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ReturnType {
        fatalError()
    }

    class Binary: Expr {
        let left: Expr
        let oper: Token
        let right: Expr

        init(left: Expr, oper: Token, right: Expr) {
            self.left = left
            self.oper = oper
            self.right = right
        }

        override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ReturnType {
            return try visitor.visitBinaryExpr(self)
        }
    }

    class Grouping: Expr {
        let expression: Expr

        init(expression: Expr) {
            self.expression = expression
        }

        override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ReturnType {
            return try visitor.visitGroupingExpr(self)
        }
    }

    class Literal: Expr {
        let value: Any?

        init(value: Any?) {
            self.value = value
        }

        override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ReturnType {
            return try visitor.visitLiteralExpr(self)
        }
    }

    class Unary: Expr {
        let oper: Token
        let right: Expr

        init(oper: Token, right: Expr) {
            self.oper = oper
            self.right = right
        }

        override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ReturnType {
            return try visitor.visitUnaryExpr(self)
        }
    }
}
